# coding: utf-8

"""
    videoapi

    The video APIs help you convert, encode, and transcode videos.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MediaInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'file_format': 'str',
        'file_format_full': 'str',
        'valid_file_formats': 'list[str]',
        'width': 'int',
        'height': 'int',
        'size': 'int',
        'bit_rate': 'int',
        'duration': 'float',
        'start_time': 'float'
    }

    attribute_map = {
        'successful': 'Successful',
        'file_format': 'FileFormat',
        'file_format_full': 'FileFormatFull',
        'valid_file_formats': 'ValidFileFormats',
        'width': 'Width',
        'height': 'Height',
        'size': 'Size',
        'bit_rate': 'BitRate',
        'duration': 'Duration',
        'start_time': 'StartTime'
    }

    def __init__(self, successful=None, file_format=None, file_format_full=None, valid_file_formats=None, width=None, height=None, size=None, bit_rate=None, duration=None, start_time=None):  # noqa: E501
        """MediaInformation - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._file_format = None
        self._file_format_full = None
        self._valid_file_formats = None
        self._width = None
        self._height = None
        self._size = None
        self._bit_rate = None
        self._duration = None
        self._start_time = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if file_format is not None:
            self.file_format = file_format
        if file_format_full is not None:
            self.file_format_full = file_format_full
        if valid_file_formats is not None:
            self.valid_file_formats = valid_file_formats
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if size is not None:
            self.size = size
        if bit_rate is not None:
            self.bit_rate = bit_rate
        if duration is not None:
            self.duration = duration
        if start_time is not None:
            self.start_time = start_time

    @property
    def successful(self):
        """Gets the successful of this MediaInformation.  # noqa: E501

        True if the operation was successful, false otherwise  # noqa: E501

        :return: The successful of this MediaInformation.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this MediaInformation.

        True if the operation was successful, false otherwise  # noqa: E501

        :param successful: The successful of this MediaInformation.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def file_format(self):
        """Gets the file_format of this MediaInformation.  # noqa: E501

        The file's short format name  # noqa: E501

        :return: The file_format of this MediaInformation.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this MediaInformation.

        The file's short format name  # noqa: E501

        :param file_format: The file_format of this MediaInformation.  # noqa: E501
        :type: str
        """

        self._file_format = file_format

    @property
    def file_format_full(self):
        """Gets the file_format_full of this MediaInformation.  # noqa: E501

        The file's full format name  # noqa: E501

        :return: The file_format_full of this MediaInformation.  # noqa: E501
        :rtype: str
        """
        return self._file_format_full

    @file_format_full.setter
    def file_format_full(self, file_format_full):
        """Sets the file_format_full of this MediaInformation.

        The file's full format name  # noqa: E501

        :param file_format_full: The file_format_full of this MediaInformation.  # noqa: E501
        :type: str
        """

        self._file_format_full = file_format_full

    @property
    def valid_file_formats(self):
        """Gets the valid_file_formats of this MediaInformation.  # noqa: E501

        A list of the file's valid formats  # noqa: E501

        :return: The valid_file_formats of this MediaInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._valid_file_formats

    @valid_file_formats.setter
    def valid_file_formats(self, valid_file_formats):
        """Sets the valid_file_formats of this MediaInformation.

        A list of the file's valid formats  # noqa: E501

        :param valid_file_formats: The valid_file_formats of this MediaInformation.  # noqa: E501
        :type: list[str]
        """

        self._valid_file_formats = valid_file_formats

    @property
    def width(self):
        """Gets the width of this MediaInformation.  # noqa: E501

        The video's width, if file is a video  # noqa: E501

        :return: The width of this MediaInformation.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this MediaInformation.

        The video's width, if file is a video  # noqa: E501

        :param width: The width of this MediaInformation.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this MediaInformation.  # noqa: E501

        The video's height, if file is a video  # noqa: E501

        :return: The height of this MediaInformation.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this MediaInformation.

        The video's height, if file is a video  # noqa: E501

        :param height: The height of this MediaInformation.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def size(self):
        """Gets the size of this MediaInformation.  # noqa: E501

        The file's size in bytes  # noqa: E501

        :return: The size of this MediaInformation.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MediaInformation.

        The file's size in bytes  # noqa: E501

        :param size: The size of this MediaInformation.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def bit_rate(self):
        """Gets the bit_rate of this MediaInformation.  # noqa: E501

        The file's bit rate  # noqa: E501

        :return: The bit_rate of this MediaInformation.  # noqa: E501
        :rtype: int
        """
        return self._bit_rate

    @bit_rate.setter
    def bit_rate(self, bit_rate):
        """Sets the bit_rate of this MediaInformation.

        The file's bit rate  # noqa: E501

        :param bit_rate: The bit_rate of this MediaInformation.  # noqa: E501
        :type: int
        """

        self._bit_rate = bit_rate

    @property
    def duration(self):
        """Gets the duration of this MediaInformation.  # noqa: E501

        The file's duration in seconds  # noqa: E501

        :return: The duration of this MediaInformation.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MediaInformation.

        The file's duration in seconds  # noqa: E501

        :param duration: The duration of this MediaInformation.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def start_time(self):
        """Gets the start_time of this MediaInformation.  # noqa: E501

        The file's media start time  # noqa: E501

        :return: The start_time of this MediaInformation.  # noqa: E501
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MediaInformation.

        The file's media start time  # noqa: E501

        :param start_time: The start_time of this MediaInformation.  # noqa: E501
        :type: float
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediaInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
